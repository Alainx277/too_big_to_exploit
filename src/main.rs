use std::sync::Arc;

use axum::{
    extract::Query,
    routing::{get, post},
    Router,
};
use rust_decimal::Decimal;
use serde::{Deserialize, Serialize};
use template::{compile_templates, HtmlTemplate};
use tera::Context;
use tokio_postgres::NoTls;
use tower_cookies::CookieManagerLayer;

mod routes;
mod session;
mod template;

#[tokio::main]
async fn main() {
    compile_templates().expect("Errors compiling HTML templates");

    // Set up database
    // Security problem: credentials in source code
    // Security problem: insecure connection
    // Security problem: priviledged user in database
    let (client, connection) = tokio_postgres::connect(
        "host=localhost user=postgres password=4w!ASSQi@xZU dbname=bank",
        NoTls,
    )
    .await
    .unwrap();
    tokio::spawn(async move {
        if let Err(e) = connection.await {
            eprintln!("connection error: {}", e);
        }
    });

    let app = Router::new()
        .route(
            "/",
            get(|param: Query<ErrorParam>| async move {
                let mut context = Context::new();
                context.insert("title", "Login");
                if let Some(error) = &param.error {
                    context.insert("error", error);
                }
                HtmlTemplate::render("login.html", context)
            }),
        )
        // Security problem: no rate limit
        .route("/login", post(routes::login::do_login))
        .route("/logout", post(routes::login::do_logout))
        .route("/dashboard", get(routes::dashboard::view_dashboard))
        .route("/transfer", post(routes::transaction::transfer_funds))
        .with_state(Arc::new(client))
        .layer(CookieManagerLayer::new());

    axum::Server::bind(&"0.0.0.0:3000".parse().unwrap())
        .serve(app.into_make_service())
        .await
        .unwrap();
}

#[derive(Deserialize)]
struct ErrorParam {
    error: Option<String>,
}

#[derive(Serialize)]
struct Account {
    id: i32,
    name: String,
    balance: Decimal,
}
