use std::{env, sync::Arc};

use axum::{
    extract::Query,
    routing::{get, post},
    Router,
};
use rust_decimal::Decimal;
use serde::{Deserialize, Serialize};
use template::{compile_templates, HtmlTemplate};
use tera::Context;
use tokio::sync::Mutex;
use tokio_postgres::{Client, NoTls};
use tower_cookies::CookieManagerLayer;
use tower_http::trace::TraceLayer;
use tracing::Level;

mod routes;
mod session;
mod template;

#[tokio::main]
async fn main() {
    tracing_subscriber::fmt().init();

    compile_templates().expect("Errors compiling HTML templates");

    // Set up database
    // Security problem: insecure connection
    let connection_string = format!(
        "host=localhost user=bank_app password={} dbname=bank",
        env::var("DB_PASSWORD").unwrap()
    );
    let (client, connection) = tokio_postgres::connect(&connection_string, NoTls)
        .await
        .unwrap();
    let (mutable_client, second_connection) = tokio_postgres::connect(&connection_string, NoTls)
        .await
        .unwrap();
    tokio::spawn(async move {
        tokio::select! {
            result = connection => {
                if let Err(e) = result {
                    eprintln!("connection error: {}", e);
                }
            },
            result = second_connection => {
                if let Err(e) = result {
                    eprintln!("connection error: {}", e);
                }
            }
        }
    });

    let state = AppState {
        client,
        transaction_client: Mutex::new(mutable_client),
    };

    let app = Router::new()
        .route(
            "/",
            get(|param: Query<ErrorParam>| async move {
                let mut context = Context::new();
                context.insert("title", "Login");
                if let Some(error) = &param.error {
                    context.insert("error", error);
                }
                HtmlTemplate::render("login.html", context)
            }),
        )
        // Security problem: no rate limit
        .route("/login", post(routes::login::do_login))
        .route("/logout", post(routes::login::do_logout))
        .route("/dashboard", get(routes::dashboard::view_dashboard))
        .route("/transfer", post(routes::transaction::transfer_funds))
        .with_state(Arc::new(state))
        .layer(CookieManagerLayer::new())
        .layer(
            TraceLayer::new_for_http()
                .make_span_with(tower_http::trace::DefaultMakeSpan::new().level(Level::INFO)),
        );

    axum::Server::bind(&"0.0.0.0:3000".parse().unwrap())
        .serve(app.into_make_service())
        .await
        .unwrap();
}

pub struct AppState {
    client: Client,
    transaction_client: Mutex<Client>,
}

#[derive(Deserialize)]
struct ErrorParam {
    error: Option<String>,
}

#[derive(Serialize)]
struct Account {
    id: i32,
    name: String,
    balance: Decimal,
}
