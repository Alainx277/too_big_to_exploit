use std::sync::Arc;

use axum::{extract::State, response::Redirect};
use tera::Context;
use tokio_postgres::Client;
use tower_cookies::Cookies;

use crate::{template::HtmlTemplate, Account};

pub async fn view_dashboard(
    State(db): State<Arc<Client>>,
    cookies: Cookies,
) -> Result<HtmlTemplate, Redirect> {
    // Security problem: unsigned cookie value used for session
    let user_cookie = cookies.get("user").ok_or_else(|| Redirect::to("/"))?;
    let user_id: i32 = user_cookie.value().parse().map_err(|_| Redirect::to("/"))?;

    let rows = db
        .query(
            "SELECT accounts.id, name, balance FROM accounts \
        INNER JOIN account_owners ON account_owners.account_id=accounts.id \
        WHERE account_owners.user_id = $1 ORDER BY name",
            &[&user_id],
        )
        .await
        .unwrap();
    let accounts: Vec<Account> = rows
        .into_iter()
        .map(|row| Account {
            id: row.get(0),
            name: row.get(1),
            balance: row.get(2),
        })
        .collect();

    let mut context = Context::new();
    context.insert("title", "Dashboard");
    context.insert("accounts", &accounts);
    Ok(HtmlTemplate::render("dashboard.html", context))
}
