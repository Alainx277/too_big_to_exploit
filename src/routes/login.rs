use std::sync::Arc;

use axum::{extract::State, response::Redirect, Form};
use serde::Deserialize;
use tokio_postgres::Client;
use tower_cookies::{Cookie, Cookies};

pub async fn do_login(
    State(db): State<Arc<Client>>,
    cookies: Cookies,
    Form(login): Form<LoginParams>,
) -> Redirect {
    // Security problem: plain-text password in database
    let rows = db
        .query(
            "SELECT id FROM users WHERE username = $1 AND password = $2 LIMIT 1",
            &[&login.username, &login.password],
        )
        .await
        .unwrap();
    if rows.is_empty() {
        return Redirect::to("/?error=credentials");
    }
    let user_id: i32 = rows.first().unwrap().get(0);

    // Security problem: unsigned cookie value used for session
    cookies.add(Cookie::new("user", user_id.to_string()));

    Redirect::to("/dashboard")
}

#[derive(Deserialize)]
pub struct LoginParams {
    username: String,
    password: String,
}
