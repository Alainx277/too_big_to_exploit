use std::sync::Arc;

use axum::{extract::State, response::Redirect, Form};
use rust_decimal::Decimal;
use serde::Deserialize;
use tera::Context;
use tokio_postgres::Client;
use tower_cookies::Cookies;

use crate::{session::validate_session, template::HtmlTemplate};

pub async fn transfer_funds(
    State(db): State<Arc<Client>>,
    cookies: Cookies,
    Form(transfer): Form<TransferParams>,
) -> Result<HtmlTemplate, Redirect> {
    let user_id = validate_session(db.as_ref(), &cookies)
        .await
        .ok_or_else(|| Redirect::to("/"))?;

    // Check if account is owned by user
    let result = db.query_opt(
        "SELECT accounts.balance FROM accounts INNER JOIN account_owners ON account_owners.account_id=accounts.id WHERE accounts.id = $1 AND account_owners.user_id = $2", 
        &[&transfer.from, &user_id]).await.unwrap();
    let Some(row) = result else {
        return Ok(render_error("Account doesn't exist or isn't owned by you"));
    };

    // Check balance
    let balance: Decimal = row.get(0);
    // Security problem: missing transaction / lock between balance check and spending
    if balance < transfer.amount {
        return Ok(render_error("Insufficient balance for transaction"));
    }

    // Transfer amount
    // Add to receiver
    let rows_modified = db
        .execute(
            "UPDATE accounts SET balance = balance + $1 WHERE accounts.id = $2",
            &[&transfer.amount, &transfer.to],
        )
        .await
        .unwrap();
    if rows_modified == 0 {
        return Ok(render_error(
            "Could not increase balance for the receiver, check if the account exists",
        ));
    }
    // Remove from sender
    let new_balance = balance - transfer.amount;
    // Security problem: missing transaction / lock between balance increase and deduction (double spend)
    let rows_modified = db
        .execute(
            "UPDATE accounts SET balance = $1 WHERE accounts.id = $2",
            &[&new_balance, &transfer.from],
        )
        .await
        .unwrap();
    if rows_modified == 0 {
        // Security problem: missing transaction between balance increase and deduction
        // database errors cause no money to be deducted
        return Ok(render_error(
            "Could not deduct funds, this incident will be reported",
        )); // https://xkcd.com/838/
    }

    let mut context = Context::new();
    context.insert("title", "Transaction executed");
    Ok(HtmlTemplate::render("transfer.html", context))
}

fn render_error(error: &str) -> HtmlTemplate {
    let mut context = Context::new();
    context.insert("title", "Transaction failed");
    context.insert("error", error);
    HtmlTemplate::render("transfer.html", context)
}

#[derive(Deserialize)]
pub struct TransferParams {
    from: i32,
    to: i32,
    amount: Decimal,
}
