use axum::{
    http::StatusCode,
    response::{Html, IntoResponse, Response},
};
use once_cell::sync::OnceCell;
use tera::{Context, Tera};

static INSTANCE: OnceCell<Tera> = OnceCell::new();

pub fn compile_templates() -> Result<(), tera::Error> {
    INSTANCE
        .set(Tera::new("templates/**/*")?)
        .expect("Templates were already compiled");
    Ok(())
}

pub struct HtmlTemplate {
    // template_path: &'static str,
    // context: Context,
    result: tera::Result<String>,
}

impl HtmlTemplate {
    pub fn render(template_path: &'static str, context: Context) -> Self {
        let instance = INSTANCE
            .get()
            .expect("Templates must be compiled before any requests");
        Self {
            result: instance.render(template_path, &context),
        }
        // Self {
        //     template_path,
        //     context,
        // }
    }
}

impl IntoResponse for HtmlTemplate {
    fn into_response(self) -> Response {
        match self.result {
            Ok(html) => Html(html).into_response(),
            Err(err) => (
                StatusCode::INTERNAL_SERVER_ERROR,
                format!("Failed to render template. Error: {}", err),
            )
                .into_response(),
        }
    }
}
